# name: Docker Build and Push

# on:
#   push:
#     tags:
#       - '*'  # 모든 태그에 대해 이 워크플로우를 트리거합니다. 깃헙레파지토리에 push가 진행될 때마다 trigger됨
      
# jobs:            #워크플로우 내에서 다른 작업과 독립적으로 실행될 수 있는 하나의 단위. Jobs(작업)에는 테스트, 빌드, 배포 등 구체적인 목표를 달성하기 위해 실행되는 구체적인 명령어 또는 액션의 집합 
#   build-and-push:
#     runs-on: ubuntu-latest    #작업 환경
#     permissions:           #지금 써준 id-token, contents에 대한 권한은 aws credential에 대한 권한임
#       id-token: write
#       contents: read

#     steps:                     #steps: 액션: 깃헙에서 재사용 가능한 최소한의 독립적 단위. 공식 마켓 사이트가 있음(uses에 가져다가 쓰기)
#     - name: Print GITHUB_REF
#       run: echo "GITHUB_REF is $GITHUB_REF"
      
#     - name: Checkout Repository
#       uses: actions/checkout@v4

#     - name: Configure AWS credentials            #<<이건 깃헙에서 제공하는 Action이 아니라 AWS에서 제공하는 Action임 
#       uses: aws-actions/configure-aws-credentials@v4
#       with:
#         aws-region: ${{ vars.AWS_REGION }}       #<<github action 환경변수에 넣어줌(AWS_REGION 와 AWS_ECR_REPO)
#         role-to-assume: arn:aws:iam::637423586845:role/github-actions-ci

#     - name: Login to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v2

#     - name: Extract tag name
#       id: extract_tag
#       shell: bash
#       run: echo "IMAGE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV   #깃헙의 TAG를 깃헙의 환경변수로 지정하는 거(이미지 테그를 맨 아래의 Build and Push Docker Image 액션에서 사용하기 위해) ECR에 이미지를 PUSH할 때 그 들어가는 이미지의 TAG를 깃헙의 TAG와 동일하게 맞추기 위해

#     - name: echo image tag       #<<디버깅 용도 액션
#       run: echo $IMAGE_TAG

#     - name: Build and Push Docker Image
#       uses: docker/build-push-action@v5
#       with:
#         push: true
#         tags: ${{ steps.login-ecr.outputs.registry }}/${{ vars.AWS_ECR_REPO }}:${{ env.IMAGE_TAG }}










name: Docker Build and Push  # 워크플로우의 이름 정의
on:
  push:
    tags:
      - 'frontend-*'  # frontend-로 시작하는 모든 태그에 대해 워크플로우 실행
      - 'backend-*'   # backend-로 시작하는 모든 태그에 대해 워크플로우 실행
      - 'llm-*'       # llm-로 시작하는 모든 태그에 대해 워크플로우 실행
jobs:
  build-and-push:    # 작업 이름 정의
    runs-on: ubuntu-latest  # 작업이 실행될 환경 (최신 Ubuntu)
    permissions:     # GitHub Actions에 필요한 권한 설정  #지금 써준 id-token, contents에 대한 권한은 aws credential에 대한 권한임
      id-token: write  # AWS 자격 증명을 위한 OIDC 토큰 발급 권한
      contents: read   # 레포지토리 내용 읽기 권한
    
    steps:                    # steps: 액션: 깃헙에서 재사용 가능한 최소한의 독립적 단위. 공식 마켓 사이트가 있음(uses에 가져다가 쓰기)
    - name: Print GITHUB_REF  # 디버깅을 위해 현재 태그 정보 출력
      run: echo "GITHUB_REF is $GITHUB_REF"
    
    - name: Checkout Repository  # 레포지토리 코드 체크아웃
      uses: actions/checkout@v4  # GitHub에서 제공하는 체크아웃 액션 사용
    
    - name: Configure AWS credentials  # AWS 자격 증명 설정   #<<이건 깃헙에서 제공하는 Action이 아니라 AWS에서 제공하는 Action임 
      uses: aws-actions/configure-aws-credentials@v4  # AWS에서 제공하는 자격 증명 액션 사용
      with:
        aws-region: ${{ vars.AWS_REGION }}  # GitHub 환경 변수에서 AWS 리전 가져오기   #<<github action 환경변수에 넣어줌(AWS_REGION 와 AWS_ECR_REPO)
        role-to-assume: arn:aws:iam::637423586845:role/github-actions-ci  # 사용할 IAM 역할
    
    - name: Login to Amazon ECR  # Amazon ECR 로그인
      id: login-ecr  # 이 단계의 출력을 참조하기 위한 ID
      uses: aws-actions/amazon-ecr-login@v2  # AWS ECR 로그인 액션 사용
    
    - name: Extract service and tag  # 태그에서 서비스명과 버전 추출
      id: extract_info  # 이 단계의 출력을 참조하기 위한 ID
      shell: bash  # 사용할 셸 지정
      run: |    #깃헙의 TAG를 깃헙의 환경변수로 지정하는 거(이미지 테그를 맨 아래의 Build and Push Docker Image 액션에서 사용하기 위해) ECR에 이미지를 PUSH할 때 그 들어가는 이미지의 TAG를 깃헙의 TAG와 동일하게 맞추기 위해
        # GITHUB_REF 형식: refs/tags/service-version
        # 예: refs/tags/backend-v1.0.0
        REF_NAME=${GITHUB_REF#refs/tags/}  # refs/tags/ 접두사 제거
        SERVICE=$(echo $REF_NAME | cut -d'-' -f1)  # 첫 번째 하이픈 앞 부분을 서비스 이름으로 추출
        VERSION=$(echo $REF_NAME | cut -d'-' -f2-)  # 첫 번째 하이픈 뒷 부분을 버전으로 추출
        echo "SERVICE=$SERVICE" >> $GITHUB_ENV  # 서비스 이름을 환경 변수로 저장
        echo "VERSION=$VERSION" >> $GITHUB_ENV  # 버전을 환경 변수로 저장
    
    - name: Echo extracted info  # 추출한 정보 확인 (디버깅용)
      run: |
        echo "Service: $SERVICE"
        echo "Version: $VERSION"
    

    - name: Debug variables
      run: |
        echo "Registry: ${{ steps.login-ecr.outputs.registry }}"
        echo "ECR Repo: ${{ vars.AWS_ECR_REPO }}"
        echo "Service: ${{ env.SERVICE }}"
        echo "Version: ${{ env.VERSION }}"
        echo "Full Image Tag: ${{ steps.login-ecr.outputs.registry }}/github-action-test:${{ env.SERVICE }}-${{ env.VERSION }}"
    


    - name: Build and Push Docker Image  # Docker 이미지 빌드 및 ECR 푸시
      uses: docker/build-push-action@v5  # Docker 빌드/푸시 액션 사용
      with:
        context: ./${{ env.SERVICE }}  # 빌드 컨텍스트를 추출한 서비스 폴더로 지정
        file: ./${{ env.SERVICE }}/Dockerfile  # 사용할 Dockerfile 경로 지정
        push: true  # 빌드 후 이미지 푸시 활성화
        tags: ${{ steps.login-ecr.outputs.registry }}/github-action-test:${{ env.SERVICE }}-${{ env.VERSION }}
        # tags: ${{ steps.login-ecr.outputs.registry }}/${{ vars.AWS_ECR_REPO }}:${{ env.SERVICE }}-${{ env.VERSION }}


        # ECR 레지스트리 주소/레포지토리명-서비스명:버전 형식으로 태그 설정
        